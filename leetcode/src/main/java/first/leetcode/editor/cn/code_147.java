//ÂØπÈìæË°®ËøõË°åÊèíÂÖ•ÊéíÂ∫è„ÄÇ 
//
// 
//ÊèíÂÖ•ÊéíÂ∫èÁöÑÂä®ÁîªÊºîÁ§∫Â¶Ç‰∏ä„ÄÇ‰ªéÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÂºÄÂßãÔºåËØ•ÈìæË°®ÂèØ‰ª•Ë¢´ËÆ§‰∏∫Â∑≤ÁªèÈÉ®ÂàÜÊéíÂ∫èÔºàÁî®ÈªëËâ≤Ë°®Á§∫Ôºâ„ÄÇ 
//ÊØèÊ¨°Ëø≠‰ª£Êó∂Ôºå‰ªéËæìÂÖ•Êï∞ÊçÆ‰∏≠ÁßªÈô§‰∏Ä‰∏™ÂÖÉÁ¥†ÔºàÁî®Á∫¢Ëâ≤Ë°®Á§∫ÔºâÔºåÂπ∂ÂéüÂú∞Â∞ÜÂÖ∂ÊèíÂÖ•Âà∞Â∑≤ÊéíÂ•ΩÂ∫èÁöÑÈìæË°®‰∏≠„ÄÇ 
//
// 
//
// ÊèíÂÖ•ÊéíÂ∫èÁÆóÊ≥ïÔºö 
//
// 
// ÊèíÂÖ•ÊéíÂ∫èÊòØËø≠‰ª£ÁöÑÔºåÊØèÊ¨°Âè™ÁßªÂä®‰∏Ä‰∏™ÂÖÉÁ¥†ÔºåÁõ¥Âà∞ÊâÄÊúâÂÖÉÁ¥†ÂèØ‰ª•ÂΩ¢Êàê‰∏Ä‰∏™ÊúâÂ∫èÁöÑËæìÂá∫ÂàóË°®„ÄÇ 
// ÊØèÊ¨°Ëø≠‰ª£‰∏≠ÔºåÊèíÂÖ•ÊéíÂ∫èÂè™‰ªéËæìÂÖ•Êï∞ÊçÆ‰∏≠ÁßªÈô§‰∏Ä‰∏™ÂæÖÊéíÂ∫èÁöÑÂÖÉÁ¥†ÔºåÊâæÂà∞ÂÆÉÂú®Â∫èÂàó‰∏≠ÈÄÇÂΩìÁöÑ‰ΩçÁΩÆÔºåÂπ∂Â∞ÜÂÖ∂ÊèíÂÖ•„ÄÇ 
// ÈáçÂ§çÁõ¥Âà∞ÊâÄÊúâËæìÂÖ•Êï∞ÊçÆÊèíÂÖ•ÂÆå‰∏∫Ê≠¢„ÄÇ 
// 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// ËæìÂÖ•: 4->2->1->3
//ËæìÂá∫: 1->2->3->4
// 
//
// Á§∫‰æã 2Ôºö 
//
// ËæìÂÖ•: -1->5->3->4->0
//ËæìÂá∫: -1->0->3->4->5
// 
// Related Topics ÊéíÂ∫è ÈìæË°® 
// üëç 371 üëé 0

package first.leetcode.editor.cn;

public class code_147 {
    public static void main(String[] args) {
        Solution solution = new code_147().new Solution();

        int[] value = {1, 1};
        ListNode listNode = NoUtil.createNodeHead(value);
        ListNode node = solution.insertionSortList(listNode);
        NoUtil.syuNode(node);

    }

    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode insertionSortList(ListNode head) {
            if (head == null) {
                return head;
            }

            ListNode root = new ListNode(Integer.MIN_VALUE);

            root.next = head;
            ListNode lastSort = head, cur = head.next;

            while (cur != null) {
                if (lastSort.val <= cur.val) {
                    lastSort = lastSort.next;
                } else {
                    ListNode pre = root;
                    while (pre.next.val <= cur.val) {
                        pre = pre.next;
                    }
                    lastSort.next = cur.next;
                    cur.next = pre.next;
                    pre.next = cur;
                }
                cur = lastSort.next;
            }

            return root.next;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}